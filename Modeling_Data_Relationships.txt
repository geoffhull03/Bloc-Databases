1. Create a database for the model we built in the example. Create a SQL file that creates the tables and inserts sample data
the questions below will help you create the data). Write queries that demonstrate the following scenarios:
    a) Find a guest who exists in the database and has not booked a room.
        Answer: SELECT *
                FROM bookings
                WHERE NOT EXISTS (SELECT 1
                FROM guests
                WHERE guests.guest_id = bookings.guest_id);
    b) Find bookings for a guest who has booked two rooms for the same dates.
        Answer: SELECT guest_id, room_id, check_in
                FROM bookings
                GROUP BY guest_id, room_id, check_in
                HAVING COUNT(*) > 1;

    c) Find bookings for a guest who has booked one room several times on different dates.
        Answer: SELECT guest_id, room_id, check_in
                FROM bookings
                GROUP BY guest_id, room_id, check_in
                HAVING COUNT(*) >= 1;

    d) Count the number of unique guests who have booked the same room.

2. Design a data model for students and the classes they have taken. The model should include the students' grades for a given class.
    a) What classes/entities do we need to model?
      Answer: There will need to be a place to store information for STUDENTS and CLASSES. There also will need a place to store grades
      which can include foreign keys for students and classes.

    b) What fields/attributes will each entity need?
      Answer: Students will need: student_id, name, and major attributes.
              Classes will need: class_id, subject, class_name, and teacher attributes.
              Grades will need: student_id, class_id, and grade attributes.

    c) What data types do we need to use?
              All of the IDs can be integers. Most of the other entities can either be varchar data types or text types.

    d) What relationships exist between entities?
              A student can have many grades, so there's a 1-* relationship between students and grades.
              A student can have many classes and a class can have many students, so there's a *-* relationship between those
              entities, but we can funnel those relationships through the grades table.

    e) How should those relationships be represented in tables?
            There are foreign keys for student_id and class_id in the grade table, so everything will funnel through the grade table, even
            with the *-* relationship between students and classes.

  3. Build a database for the students/classes data model.
  Create a SQL file that creates the tables and inserts sample data (the questions below will help you create the data).
  Write queries that demonstrate the following scenarios:
    a) Find all students who have taken a particular class.
        Answer: SELECT students.name, grades.class_id
                FROM grades
                FULL OUTER JOIN students
                ON students.id = grades.student_id
                WHERE class_id = 100;

    b) Count the number of each grade (using letter grades A-F) earned in a particular class.
        Answer: SELECT COUNT(*) FROM grades WHERE class_id=100 AND grade.grade_id = "A"

    c) Find class names and the total number of students who have taken each class in the list.
        Answer: Answer: SELECT COUNT(*) FROM grades WHERE class_id=100

    d) Find the class taken by the largest number of students.
        Answer: SELECT COUNT(*) FROM grades WHERE class_id=100
